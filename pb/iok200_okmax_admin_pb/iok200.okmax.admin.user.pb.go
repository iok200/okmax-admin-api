// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iok200.okmax.admin.user.proto

package iok200_okmax_admin_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	iok200_blada_pb "github.com/iok200/blada/pb/iok200_blada_pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserCreateRequest struct {
	// 用户信息
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// 角色ID
	RoleIds              []string `protobuf:"bytes,2,rep,name=roleIds,proto3" json:"roleIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCreateRequest) Reset()         { *m = UserCreateRequest{} }
func (m *UserCreateRequest) String() string { return proto.CompactTextString(m) }
func (*UserCreateRequest) ProtoMessage()    {}
func (*UserCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{0}
}

func (m *UserCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCreateRequest.Unmarshal(m, b)
}
func (m *UserCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCreateRequest.Marshal(b, m, deterministic)
}
func (m *UserCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCreateRequest.Merge(m, src)
}
func (m *UserCreateRequest) XXX_Size() int {
	return xxx_messageInfo_UserCreateRequest.Size(m)
}
func (m *UserCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserCreateRequest proto.InternalMessageInfo

func (m *UserCreateRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserCreateRequest) GetRoleIds() []string {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

type UserUpdateRequest struct {
	// 用户信息
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserUpdateRequest) Reset()         { *m = UserUpdateRequest{} }
func (m *UserUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UserUpdateRequest) ProtoMessage()    {}
func (*UserUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{1}
}

func (m *UserUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdateRequest.Unmarshal(m, b)
}
func (m *UserUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdateRequest.Marshal(b, m, deterministic)
}
func (m *UserUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdateRequest.Merge(m, src)
}
func (m *UserUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UserUpdateRequest.Size(m)
}
func (m *UserUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdateRequest proto.InternalMessageInfo

func (m *UserUpdateRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserQueryRequest struct {
	Page *iok200_blada_pb.PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 用户名
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	// 账号
	LoginName            string   `protobuf:"bytes,3,opt,name=loginName,proto3" json:"loginName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQueryRequest) Reset()         { *m = UserQueryRequest{} }
func (m *UserQueryRequest) String() string { return proto.CompactTextString(m) }
func (*UserQueryRequest) ProtoMessage()    {}
func (*UserQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{2}
}

func (m *UserQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQueryRequest.Unmarshal(m, b)
}
func (m *UserQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQueryRequest.Marshal(b, m, deterministic)
}
func (m *UserQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQueryRequest.Merge(m, src)
}
func (m *UserQueryRequest) XXX_Size() int {
	return xxx_messageInfo_UserQueryRequest.Size(m)
}
func (m *UserQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserQueryRequest proto.InternalMessageInfo

func (m *UserQueryRequest) GetPage() *iok200_blada_pb.PageRequest {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *UserQueryRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserQueryRequest) GetLoginName() string {
	if m != nil {
		return m.LoginName
	}
	return ""
}

type UserQueryResult struct {
	State *iok200_blada_pb.ResultState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Page  *iok200_blada_pb.PageResult  `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	// 用户列表
	Users                []*User  `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQueryResult) Reset()         { *m = UserQueryResult{} }
func (m *UserQueryResult) String() string { return proto.CompactTextString(m) }
func (*UserQueryResult) ProtoMessage()    {}
func (*UserQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{3}
}

func (m *UserQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQueryResult.Unmarshal(m, b)
}
func (m *UserQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQueryResult.Marshal(b, m, deterministic)
}
func (m *UserQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQueryResult.Merge(m, src)
}
func (m *UserQueryResult) XXX_Size() int {
	return xxx_messageInfo_UserQueryResult.Size(m)
}
func (m *UserQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserQueryResult proto.InternalMessageInfo

func (m *UserQueryResult) GetState() *iok200_blada_pb.ResultState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UserQueryResult) GetPage() *iok200_blada_pb.PageResult {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *UserQueryResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserLoginRequest struct {
	// 账号
	LoginName string `protobuf:"bytes,1,opt,name=loginName,proto3" json:"loginName,omitempty"`
	// 密码
	LoginPass            string   `protobuf:"bytes,2,opt,name=loginPass,proto3" json:"loginPass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLoginRequest) Reset()         { *m = UserLoginRequest{} }
func (m *UserLoginRequest) String() string { return proto.CompactTextString(m) }
func (*UserLoginRequest) ProtoMessage()    {}
func (*UserLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{4}
}

func (m *UserLoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserLoginRequest.Unmarshal(m, b)
}
func (m *UserLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserLoginRequest.Marshal(b, m, deterministic)
}
func (m *UserLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginRequest.Merge(m, src)
}
func (m *UserLoginRequest) XXX_Size() int {
	return xxx_messageInfo_UserLoginRequest.Size(m)
}
func (m *UserLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginRequest proto.InternalMessageInfo

func (m *UserLoginRequest) GetLoginName() string {
	if m != nil {
		return m.LoginName
	}
	return ""
}

func (m *UserLoginRequest) GetLoginPass() string {
	if m != nil {
		return m.LoginPass
	}
	return ""
}

type UserLoginResult struct {
	State *iok200_blada_pb.ResultState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// 登录用户信息
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// 登录令牌
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// 令牌到期时间
	TokenTimeout         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=tokenTimeout,proto3" json:"tokenTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserLoginResult) Reset()         { *m = UserLoginResult{} }
func (m *UserLoginResult) String() string { return proto.CompactTextString(m) }
func (*UserLoginResult) ProtoMessage()    {}
func (*UserLoginResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{5}
}

func (m *UserLoginResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserLoginResult.Unmarshal(m, b)
}
func (m *UserLoginResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserLoginResult.Marshal(b, m, deterministic)
}
func (m *UserLoginResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginResult.Merge(m, src)
}
func (m *UserLoginResult) XXX_Size() int {
	return xxx_messageInfo_UserLoginResult.Size(m)
}
func (m *UserLoginResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginResult proto.InternalMessageInfo

func (m *UserLoginResult) GetState() *iok200_blada_pb.ResultState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UserLoginResult) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserLoginResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserLoginResult) GetTokenTimeout() *timestamp.Timestamp {
	if m != nil {
		return m.TokenTimeout
	}
	return nil
}

type UserQueryByIdResult struct {
	State *iok200_blada_pb.ResultState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// 用户信息
	User                 *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQueryByIdResult) Reset()         { *m = UserQueryByIdResult{} }
func (m *UserQueryByIdResult) String() string { return proto.CompactTextString(m) }
func (*UserQueryByIdResult) ProtoMessage()    {}
func (*UserQueryByIdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{6}
}

func (m *UserQueryByIdResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQueryByIdResult.Unmarshal(m, b)
}
func (m *UserQueryByIdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQueryByIdResult.Marshal(b, m, deterministic)
}
func (m *UserQueryByIdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQueryByIdResult.Merge(m, src)
}
func (m *UserQueryByIdResult) XXX_Size() int {
	return xxx_messageInfo_UserQueryByIdResult.Size(m)
}
func (m *UserQueryByIdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQueryByIdResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserQueryByIdResult proto.InternalMessageInfo

func (m *UserQueryByIdResult) GetState() *iok200_blada_pb.ResultState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UserQueryByIdResult) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserQueryRoleResult struct {
	State *iok200_blada_pb.ResultState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// 用户ID
	Roles                []*Role  `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQueryRoleResult) Reset()         { *m = UserQueryRoleResult{} }
func (m *UserQueryRoleResult) String() string { return proto.CompactTextString(m) }
func (*UserQueryRoleResult) ProtoMessage()    {}
func (*UserQueryRoleResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{7}
}

func (m *UserQueryRoleResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQueryRoleResult.Unmarshal(m, b)
}
func (m *UserQueryRoleResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQueryRoleResult.Marshal(b, m, deterministic)
}
func (m *UserQueryRoleResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQueryRoleResult.Merge(m, src)
}
func (m *UserQueryRoleResult) XXX_Size() int {
	return xxx_messageInfo_UserQueryRoleResult.Size(m)
}
func (m *UserQueryRoleResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQueryRoleResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserQueryRoleResult proto.InternalMessageInfo

func (m *UserQueryRoleResult) GetState() *iok200_blada_pb.ResultState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UserQueryRoleResult) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type UserQueryAuthResult struct {
	State *iok200_blada_pb.ResultState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// 用户ID
	Auths                []*Auth  `protobuf:"bytes,2,rep,name=auths,proto3" json:"auths,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQueryAuthResult) Reset()         { *m = UserQueryAuthResult{} }
func (m *UserQueryAuthResult) String() string { return proto.CompactTextString(m) }
func (*UserQueryAuthResult) ProtoMessage()    {}
func (*UserQueryAuthResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{8}
}

func (m *UserQueryAuthResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQueryAuthResult.Unmarshal(m, b)
}
func (m *UserQueryAuthResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQueryAuthResult.Marshal(b, m, deterministic)
}
func (m *UserQueryAuthResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQueryAuthResult.Merge(m, src)
}
func (m *UserQueryAuthResult) XXX_Size() int {
	return xxx_messageInfo_UserQueryAuthResult.Size(m)
}
func (m *UserQueryAuthResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQueryAuthResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserQueryAuthResult proto.InternalMessageInfo

func (m *UserQueryAuthResult) GetState() *iok200_blada_pb.ResultState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UserQueryAuthResult) GetAuths() []*Auth {
	if m != nil {
		return m.Auths
	}
	return nil
}

type UserBindRoleRequest struct {
	// 用户ID
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	// 角色ID
	RoleIds              []string `protobuf:"bytes,2,rep,name=roleIds,proto3" json:"roleIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserBindRoleRequest) Reset()         { *m = UserBindRoleRequest{} }
func (m *UserBindRoleRequest) String() string { return proto.CompactTextString(m) }
func (*UserBindRoleRequest) ProtoMessage()    {}
func (*UserBindRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f576c6449dc662c0, []int{9}
}

func (m *UserBindRoleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserBindRoleRequest.Unmarshal(m, b)
}
func (m *UserBindRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserBindRoleRequest.Marshal(b, m, deterministic)
}
func (m *UserBindRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBindRoleRequest.Merge(m, src)
}
func (m *UserBindRoleRequest) XXX_Size() int {
	return xxx_messageInfo_UserBindRoleRequest.Size(m)
}
func (m *UserBindRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBindRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserBindRoleRequest proto.InternalMessageInfo

func (m *UserBindRoleRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserBindRoleRequest) GetRoleIds() []string {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

func init() {
	proto.RegisterType((*UserCreateRequest)(nil), "iok200.okmax.admin.UserCreateRequest")
	proto.RegisterType((*UserUpdateRequest)(nil), "iok200.okmax.admin.UserUpdateRequest")
	proto.RegisterType((*UserQueryRequest)(nil), "iok200.okmax.admin.UserQueryRequest")
	proto.RegisterType((*UserQueryResult)(nil), "iok200.okmax.admin.UserQueryResult")
	proto.RegisterType((*UserLoginRequest)(nil), "iok200.okmax.admin.UserLoginRequest")
	proto.RegisterType((*UserLoginResult)(nil), "iok200.okmax.admin.UserLoginResult")
	proto.RegisterType((*UserQueryByIdResult)(nil), "iok200.okmax.admin.UserQueryByIdResult")
	proto.RegisterType((*UserQueryRoleResult)(nil), "iok200.okmax.admin.UserQueryRoleResult")
	proto.RegisterType((*UserQueryAuthResult)(nil), "iok200.okmax.admin.UserQueryAuthResult")
	proto.RegisterType((*UserBindRoleRequest)(nil), "iok200.okmax.admin.UserBindRoleRequest")
}

func init() {
	proto.RegisterFile("iok200.okmax.admin.user.proto", fileDescriptor_f576c6449dc662c0)
}

var fileDescriptor_f576c6449dc662c0 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xcd, 0x4f, 0x93, 0xaf, 0x99, 0x56, 0xfa, 0x60, 0x41, 0xc8, 0x58, 0xfc, 0x44, 0x0b, 0x88,
	0x5e, 0x50, 0xa7, 0x0a, 0x77, 0x08, 0x21, 0x35, 0x50, 0x55, 0x91, 0xa0, 0x4a, 0xdd, 0xf4, 0x06,
	0x2e, 0xa2, 0x75, 0xbd, 0x38, 0x56, 0x6c, 0xaf, 0xb1, 0xd7, 0x40, 0x25, 0x9e, 0x86, 0x27, 0xe0,
	0x2d, 0x78, 0x2d, 0xb4, 0x3f, 0x4e, 0x9c, 0x34, 0x4e, 0x2b, 0x23, 0x71, 0xe7, 0xf5, 0x9c, 0x3d,
	0xe7, 0xcc, 0xec, 0xcc, 0xc0, 0x43, 0x9f, 0xcd, 0xfa, 0x07, 0x07, 0x16, 0x9b, 0x85, 0xe4, 0xbb,
	0x45, 0xdc, 0xd0, 0x8f, 0xac, 0x2c, 0xa5, 0x89, 0x15, 0x27, 0x8c, 0x33, 0x84, 0xae, 0x86, 0xcd,
	0xdd, 0x0b, 0x16, 0x86, 0x2c, 0x52, 0x08, 0xf3, 0xd1, 0x1a, 0x82, 0x90, 0xb9, 0x34, 0xd0, 0xf1,
	0xc7, 0x1e, 0x63, 0x5e, 0x40, 0x7b, 0xf2, 0xe4, 0x64, 0x9f, 0x7b, 0xdc, 0x0f, 0x69, 0xca, 0x49,
	0x18, 0x2b, 0x00, 0xfe, 0x04, 0xb7, 0xcf, 0x53, 0x9a, 0xbc, 0x4d, 0x28, 0xe1, 0xd4, 0xa6, 0x5f,
	0x32, 0x9a, 0x72, 0xf4, 0x02, 0xb6, 0x84, 0x0b, 0xa3, 0xde, 0xad, 0xef, 0xed, 0xf4, 0x0d, 0x6b,
	0x8d, 0x88, 0xb8, 0x64, 0x4b, 0x14, 0x32, 0xe0, 0xbf, 0x84, 0x05, 0x74, 0xe8, 0xa6, 0x46, 0xa3,
	0xdb, 0xdc, 0xeb, 0xd8, 0xf9, 0x11, 0x1f, 0x2a, 0xf2, 0xf3, 0xd8, 0xad, 0x4a, 0x8e, 0x7f, 0xc0,
	0x2d, 0x71, 0x3a, 0xcd, 0x68, 0x72, 0x99, 0x33, 0x58, 0xb0, 0x15, 0x13, 0x8f, 0x6a, 0x06, 0x33,
	0x67, 0xd0, 0x85, 0x19, 0x11, 0x2f, 0xd7, 0xb2, 0x25, 0x0e, 0x99, 0xb0, 0x2d, 0xb8, 0x4e, 0x48,
	0x48, 0x8d, 0x46, 0xb7, 0xbe, 0xd7, 0xb1, 0xe7, 0x67, 0xf4, 0x00, 0x3a, 0x01, 0xf3, 0xfc, 0x48,
	0x06, 0x9b, 0x32, 0xb8, 0xf8, 0x81, 0x7f, 0xd6, 0xe1, 0xff, 0x82, 0x7c, 0x9a, 0x05, 0x1c, 0x1d,
	0x40, 0x2b, 0xe5, 0x84, 0x97, 0xc9, 0x2b, 0xd4, 0x99, 0x40, 0xd8, 0x0a, 0x88, 0xf6, 0xb5, 0xdf,
	0x86, 0xbc, 0x70, 0x7f, 0xad, 0x5f, 0x71, 0x49, 0xdb, 0xb5, 0xa0, 0x25, 0xec, 0xa5, 0x46, 0xb3,
	0xdb, 0xdc, 0x58, 0x21, 0x05, 0xc3, 0x27, 0xaa, 0x44, 0xef, 0x85, 0xeb, 0xbc, 0x44, 0x4b, 0x69,
	0xd5, 0x57, 0xd2, 0x9a, 0x47, 0x47, 0x24, 0x4d, 0x75, 0x45, 0x16, 0x3f, 0xf0, 0x6f, 0x9d, 0xb4,
	0x26, 0xac, 0x98, 0x74, 0xfe, 0xcc, 0x8d, 0x1b, 0xf5, 0xd0, 0x5d, 0x68, 0x71, 0x36, 0xa3, 0x91,
	0x7e, 0x02, 0x75, 0x40, 0x6f, 0x60, 0x57, 0x7e, 0x8c, 0xfd, 0x90, 0xb2, 0x8c, 0x1b, 0x5b, 0x5a,
	0x5c, 0x35, 0xb5, 0x95, 0x37, 0xb5, 0x35, 0xce, 0x9b, 0xda, 0x5e, 0xc2, 0xe3, 0x0c, 0xee, 0xcc,
	0x5f, 0x6f, 0x70, 0x39, 0x74, 0xff, 0x4d, 0x32, 0xf8, 0x5b, 0x41, 0xd6, 0x66, 0x01, 0xad, 0x2c,
	0x6b, 0x41, 0x4b, 0x8c, 0x92, 0x9a, 0xab, 0x12, 0x5d, 0x29, 0xa0, 0x60, 0x4b, 0xc2, 0x87, 0x19,
	0x9f, 0xfe, 0x8d, 0x30, 0xc9, 0xf8, 0x74, 0xa3, 0xb0, 0x14, 0x50, 0x30, 0x7c, 0xac, 0x84, 0x07,
	0x7e, 0xe4, 0xaa, 0x84, 0x55, 0x17, 0xde, 0x83, 0xb6, 0x28, 0xc8, 0xd0, 0xd5, 0x2d, 0xa8, 0x4f,
	0xe5, 0x1b, 0xa3, 0xff, 0xab, 0x0d, 0x3b, 0x82, 0xe9, 0x8c, 0x26, 0x5f, 0xfd, 0x0b, 0x8a, 0x3e,
	0x40, 0x5b, 0xad, 0x26, 0xf4, 0xac, 0xac, 0xe8, 0x4b, 0xab, 0xcb, 0xdc, 0x90, 0x1c, 0xae, 0x09,
	0x3a, 0xb5, 0x8c, 0xca, 0xe9, 0x96, 0x96, 0xd5, 0x35, 0x74, 0x47, 0x00, 0xef, 0x68, 0x40, 0x39,
	0x15, 0xcd, 0x85, 0x56, 0x07, 0x7b, 0xe8, 0xa6, 0x37, 0xa3, 0x19, 0x43, 0x4b, 0x3e, 0x19, 0x7a,
	0x5a, 0x66, 0xaa, 0xb8, 0xfe, 0xcc, 0x27, 0xd7, 0xa0, 0x04, 0x35, 0xae, 0xa1, 0x11, 0x74, 0xe6,
	0x8d, 0x8f, 0x8c, 0x2b, 0xde, 0x72, 0xb6, 0xe7, 0x1b, 0xd9, 0x16, 0x53, 0xa3, 0x7c, 0xca, 0x9d,
	0x50, 0xee, 0xb3, 0xb8, 0x83, 0xca, 0x7d, 0x16, 0x16, 0x0b, 0xae, 0xa1, 0x63, 0xd8, 0x55, 0x35,
	0x3f, 0x8a, 0x88, 0x13, 0xd0, 0xea, 0x65, 0xcc, 0x13, 0x16, 0x1d, 0x58, 0x39, 0xe1, 0xc5, 0xbc,
	0x16, 0x18, 0x45, 0xab, 0x57, 0x66, 0x5c, 0x0c, 0x22, 0xae, 0xa1, 0x53, 0xd8, 0xce, 0x87, 0x04,
	0x95, 0x5e, 0x5b, 0x19, 0xa3, 0xcd, 0x69, 0x0f, 0x5e, 0x7f, 0x7c, 0xe5, 0xf9, 0x7c, 0x9a, 0x39,
	0x22, 0xdc, 0x53, 0xc8, 0x9e, 0xa4, 0xdc, 0x97, 0x94, 0xfb, 0x24, 0xf6, 0x7b, 0xb1, 0xa3, 0x23,
	0x13, 0x19, 0x99, 0xc8, 0xc8, 0x24, 0x76, 0x9c, 0xb6, 0x5c, 0xa2, 0x2f, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x96, 0x32, 0xdd, 0x81, 0x8a, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// 创建
	Create(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error)
	// 修改
	Update(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error)
	// ID删除
	DeleteById(ctx context.Context, in *iok200_blada_pb.IdsRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error)
	// 查询
	Query(ctx context.Context, in *UserQueryRequest, opts ...grpc.CallOption) (*UserQueryResult, error)
	// ID查询
	QueryById(ctx context.Context, in *iok200_blada_pb.IdRequest, opts ...grpc.CallOption) (*UserQueryByIdResult, error)
	// 登录
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResult, error)
	// 修改可用
	UpdateEnable(ctx context.Context, in *iok200_blada_pb.IdsRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error)
	// 查询用户角色
	QueryRole(ctx context.Context, in *iok200_blada_pb.IdRequest, opts ...grpc.CallOption) (*UserQueryRoleResult, error)
	// 查询用户权限
	QueryAuth(ctx context.Context, in *iok200_blada_pb.IdRequest, opts ...grpc.CallOption) (*UserQueryAuthResult, error)
	// 绑定权限
	BindRole(ctx context.Context, in *UserBindRoleRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error) {
	out := new(iok200_blada_pb.ResultState)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error) {
	out := new(iok200_blada_pb.ResultState)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteById(ctx context.Context, in *iok200_blada_pb.IdsRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error) {
	out := new(iok200_blada_pb.ResultState)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/DeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Query(ctx context.Context, in *UserQueryRequest, opts ...grpc.CallOption) (*UserQueryResult, error) {
	out := new(UserQueryResult)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryById(ctx context.Context, in *iok200_blada_pb.IdRequest, opts ...grpc.CallOption) (*UserQueryByIdResult, error) {
	out := new(UserQueryByIdResult)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/QueryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResult, error) {
	out := new(UserLoginResult)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateEnable(ctx context.Context, in *iok200_blada_pb.IdsRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error) {
	out := new(iok200_blada_pb.ResultState)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/UpdateEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryRole(ctx context.Context, in *iok200_blada_pb.IdRequest, opts ...grpc.CallOption) (*UserQueryRoleResult, error) {
	out := new(UserQueryRoleResult)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/QueryRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryAuth(ctx context.Context, in *iok200_blada_pb.IdRequest, opts ...grpc.CallOption) (*UserQueryAuthResult, error) {
	out := new(UserQueryAuthResult)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/QueryAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BindRole(ctx context.Context, in *UserBindRoleRequest, opts ...grpc.CallOption) (*iok200_blada_pb.ResultState, error) {
	out := new(iok200_blada_pb.ResultState)
	err := c.cc.Invoke(ctx, "/iok200.okmax.admin.UserService/BindRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// 创建
	Create(context.Context, *UserCreateRequest) (*iok200_blada_pb.ResultState, error)
	// 修改
	Update(context.Context, *UserUpdateRequest) (*iok200_blada_pb.ResultState, error)
	// ID删除
	DeleteById(context.Context, *iok200_blada_pb.IdsRequest) (*iok200_blada_pb.ResultState, error)
	// 查询
	Query(context.Context, *UserQueryRequest) (*UserQueryResult, error)
	// ID查询
	QueryById(context.Context, *iok200_blada_pb.IdRequest) (*UserQueryByIdResult, error)
	// 登录
	Login(context.Context, *UserLoginRequest) (*UserLoginResult, error)
	// 修改可用
	UpdateEnable(context.Context, *iok200_blada_pb.IdsRequest) (*iok200_blada_pb.ResultState, error)
	// 查询用户角色
	QueryRole(context.Context, *iok200_blada_pb.IdRequest) (*UserQueryRoleResult, error)
	// 查询用户权限
	QueryAuth(context.Context, *iok200_blada_pb.IdRequest) (*UserQueryAuthResult, error)
	// 绑定权限
	BindRole(context.Context, *UserBindRoleRequest) (*iok200_blada_pb.ResultState, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Create(ctx context.Context, req *UserCreateRequest) (*iok200_blada_pb.ResultState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedUserServiceServer) Update(ctx context.Context, req *UserUpdateRequest) (*iok200_blada_pb.ResultState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserServiceServer) DeleteById(ctx context.Context, req *iok200_blada_pb.IdsRequest) (*iok200_blada_pb.ResultState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (*UnimplementedUserServiceServer) Query(ctx context.Context, req *UserQueryRequest) (*UserQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedUserServiceServer) QueryById(ctx context.Context, req *iok200_blada_pb.IdRequest) (*UserQueryByIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryById not implemented")
}
func (*UnimplementedUserServiceServer) Login(ctx context.Context, req *UserLoginRequest) (*UserLoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUserServiceServer) UpdateEnable(ctx context.Context, req *iok200_blada_pb.IdsRequest) (*iok200_blada_pb.ResultState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnable not implemented")
}
func (*UnimplementedUserServiceServer) QueryRole(ctx context.Context, req *iok200_blada_pb.IdRequest) (*UserQueryRoleResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRole not implemented")
}
func (*UnimplementedUserServiceServer) QueryAuth(ctx context.Context, req *iok200_blada_pb.IdRequest) (*UserQueryAuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAuth not implemented")
}
func (*UnimplementedUserServiceServer) BindRole(ctx context.Context, req *UserBindRoleRequest) (*iok200_blada_pb.ResultState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindRole not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iok200_blada_pb.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteById(ctx, req.(*iok200_blada_pb.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Query(ctx, req.(*UserQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iok200_blada_pb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/QueryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryById(ctx, req.(*iok200_blada_pb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iok200_blada_pb.IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/UpdateEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateEnable(ctx, req.(*iok200_blada_pb.IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iok200_blada_pb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/QueryRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryRole(ctx, req.(*iok200_blada_pb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iok200_blada_pb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/QueryAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryAuth(ctx, req.(*iok200_blada_pb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BindRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBindRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BindRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iok200.okmax.admin.UserService/BindRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BindRole(ctx, req.(*UserBindRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iok200.okmax.admin.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _UserService_DeleteById_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _UserService_Query_Handler,
		},
		{
			MethodName: "QueryById",
			Handler:    _UserService_QueryById_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "UpdateEnable",
			Handler:    _UserService_UpdateEnable_Handler,
		},
		{
			MethodName: "QueryRole",
			Handler:    _UserService_QueryRole_Handler,
		},
		{
			MethodName: "QueryAuth",
			Handler:    _UserService_QueryAuth_Handler,
		},
		{
			MethodName: "BindRole",
			Handler:    _UserService_BindRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iok200.okmax.admin.user.proto",
}
